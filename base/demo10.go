package main

import "fmt"

func main() {

	var i int = 5
	//二进制输出
	fmt.Printf("%b \n", i)

	//八进制：0-7，满8进1，以数字0开头表示
	var j int = 011 //011=> 9
	fmt.Println("j=",j)

	//0-9及A-F 满16进1 以0x或0X开头表示
	var k int = 0x11 // 0x11=> 16 + 1 = 17
	fmt.Println("k=",k)

	//二进制转十进制 1101
	//规则：从最低位开始（右边的），将每个位上的数提取出来，乘以2的（位数-1）次方，然后求和
	//1011 = 1 + 2 + 0 + 8 =11

	//八进制转十进制
	//规则：从最低位开始（右边的），将每个位上的数提取出来，乘以8的（位数-1）次方，然后求和
	//0123 = 3 * 1 + 2 * 8 + 1 * 8 * 8 = 3 + 16 + 64 =83

	//十六进制转十进制
	//规则：从最低位开始（右边的），将每个位上的数提取出来，乘以16的（位数-1）次方，然后求和
	//0x34A = 10 * 1 + 4 * 16 + 3 * 16 * 16 = 10 + 64 + 768 = 842

	//十进制转二进制
	//规则：将该数不断除以2，直到商为0为止，然后将每步得到的余数倒过来，就是对应的二进制
	//56转成二进制 111000

	//十进制转八进制
	//规则：将该数不断除以8，直到商为0为止，然后将每步得到的余数倒过来，就是对应的八进制
	//156转成八进制 0234

	//十进制转十六进制
	//规则：将该数不断除以16，直到商为0为止，然后将每步得到的余数倒过来，就是对应的十六进制
	//356转成十六进制 0x164

	//二进制转八进制
	//规则：将二进制数每三位一组（从低位开始组合），转成对应八进制数即可
	//11010101 转成八进制 0325

	//二进制转十六进制
	//规则：将二进制数每四位一组（从低位开始组合），转成对应十六进制数即可
	//11010101 转成十六进制 0xD5

	//八进制转二进制
	//规则：将八进制数每1位，转成对应的一个3位的二进制数即可
	//0237 = 10011111

	//十六进制转二进制
	//规则：将十六进制数每1位，转成对应的一个4位的二进制数即可
	//0X237 = 1000110111



	//原码，反码，补码
	//对于有符号的而言：
	//(1)二进制的最高位是符号位：0表示正数，1表示负数
	//1 ==> [0000 0001] -1 ==> [1000 0001]

	//(2)正数的原码，反码，补码都一样
	//1 ==>原码[0000 0001] 反码[0000 0001] 补码[0000 0001]

	//(3)负数的反码等于他的原码的符号位不变，其他位取反(0->1, 1->0)
	//-1 ==>原码[1000 0001] 反码[1111 1110] 补码[1111 1111]

	//(4)负数的补码等于它的反码+1

	//(5)0的反码，补码都是0

	//(6)在计算机运算的时候，都是以补码的方式来运算的
}