package main

import "fmt"

func main() {
	//重点讲解/,%
	//位运算的演示 Golang 中有 3 个位运算
	//按位与 &
	//按位或 |
	//按位异或^

	//运算规则
	//按位与 &：两位全为１，结果为 1，否则为 0。
	//按位或 |：两位有一个为 1 ，结果为 1 ，否则为0。
	//按位异或 ^：两位一个为 0，一个为 1，结果为1，否则为 0。

	//2&3
	//2的补码 0000 0010
	//3的补码 0000 0011
	//2&3    0000 0010 =>2
	fmt.Println(2&3)

	//2|3
	//2的补码 0000 0010
	//3的补码 0000 0011
	//2|3    0000 0011 =>3
	fmt.Println(2|3)

	//2^3
	//2的补码 0000 0010
	//3的补码 0000 0011
	//2^3    0000 0001 =>1
	fmt.Println(2^3)

	//-2^2
	//-2的原码 1000 0010 =》反码 1111 1101 =》补码 1111 1110
	//       1111 1110
	//2的补码 0000 0010
	//-2^2   1111 1100 (这里还是补码) ===》需要转成原码
	//1111 1100 ==> 反码 1111 1011 ==》原码 1000 0100 =》 -4
	fmt.Println(-2^2)


	//go 2个移位运算符
	// >> <<右移和左移，运算规则：
	//右移运算符 >>;低位溢出，符号位不变，并用符号位补溢出的高位
	//左移运算符 <<;符号位不变,低位补0
	a := 1 >> 2 // 0000 0001 => 0000 0000 = 0
	fmt.Println(a)
	c := 1 << 2 // 0000 0001 => 0000 0100 = 4
	fmt.Println(c)
}